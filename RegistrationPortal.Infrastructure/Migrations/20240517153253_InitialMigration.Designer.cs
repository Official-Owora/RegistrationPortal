// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistrationPortal.Infrastructure.DataContext;

#nullable disable

namespace RegistrationPortal.Infrastructure.Migrations
{
    [DbContext(typeof(ProgramAppDbContext))]
    [Migration("20240517153253_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CandidateApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomQuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateApplicationId");

                    b.HasIndex("CustomQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.CandidateApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("CandidateApplications");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Choice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChoiceText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.CustomQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("MaxChoiceAllowed")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProgramId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("CustomQuestions");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Program", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProgramId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Answer", b =>
                {
                    b.HasOne("RegistrationPortal.Domain.Models.CandidateApplication", "CandidateApplication")
                        .WithMany("Answers")
                        .HasForeignKey("CandidateApplicationId");

                    b.HasOne("RegistrationPortal.Domain.Models.CustomQuestion", "CustomQuestion")
                        .WithMany()
                        .HasForeignKey("CustomQuestionId");

                    b.HasOne("RegistrationPortal.Domain.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateApplication");

                    b.Navigation("CustomQuestion");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.CandidateApplication", b =>
                {
                    b.HasOne("RegistrationPortal.Domain.Models.Program", "Program")
                        .WithMany("CandidateApplications")
                        .HasForeignKey("ProgramId");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Choice", b =>
                {
                    b.HasOne("RegistrationPortal.Domain.Models.Answer", "Answer")
                        .WithMany("Choices")
                        .HasForeignKey("AnswerId");

                    b.HasOne("RegistrationPortal.Domain.Models.CustomQuestion", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.CustomQuestion", b =>
                {
                    b.HasOne("RegistrationPortal.Domain.Models.Program", "Program")
                        .WithMany("CustomQuestions")
                        .HasForeignKey("ProgramId");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Question", b =>
                {
                    b.HasOne("RegistrationPortal.Domain.Models.Program", "Program")
                        .WithMany("Questions")
                        .HasForeignKey("ProgramId");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Answer", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.CandidateApplication", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.CustomQuestion", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("RegistrationPortal.Domain.Models.Program", b =>
                {
                    b.Navigation("CandidateApplications");

                    b.Navigation("CustomQuestions");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
